// seka_demo.js
// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–∞–º–∏ –º–∞–∫–µ—Ç–∞: –∑–∞–≥—Ä—É–∑–∫–∞, –æ–∂–∏–¥–∞–Ω–∏–µ, —Ö–æ–¥ –∏–≥—Ä–æ–∫–∞, –æ–∫–Ω–æ —Å—Ç–∞–≤–æ–∫

const stages = ['loading', 'queue', 'turn', 'betting'];
let currentStage = 0;

// –î–ª—è —Å—Ç–∞–≤–æ–∫
const chipValues = [25, 50, 100, 500, 1000, 5000];
let selectedChip = 0;
let betAmount = chipValues[0];

function renderStage(stage) {
    const root = document.getElementById('seka-root');
    root.innerHTML = '';
    if (stage === 'loading') {
        root.appendChild(renderLoading());
    } else if (stage === 'queue') {
        root.appendChild(renderQueue());
    } else if (stage === 'turn') {
        root.appendChild(renderTurn());
    } else if (stage === 'betting') {
        root.appendChild(renderBetting());
        addBettingListeners();
    }
}

function renderLoading() {
    const container = document.createElement('div');
    container.className = 'seka-table-container';
    container.innerHTML = `
        <div class="seka-header">
            <button class="menu-btn">‚ò∞</button>
            <span class="queue-label">–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ user1234</span>
            <div>
                <button class="sound-btn">üîä</button>
                <button class="settings-btn">‚öôÔ∏è</button>
            </div>
        </div>
        <div class="seka-table">
            <div class="seka-table-logo">–°–ï–ö–ê</div>
            <div class="seka-bank">–ë–∞–Ω–∫: $0.00</div>
            <div class="seka-players">
                ${renderPlayer({name: 'Kendall R.', balance: 1500, avatar: '', pos: 0, active: true})}
                ${[1,2,3].map(i => renderPlayer({name: '', balance: 0, avatar: '', pos: i, placeholder: true})).join('')}
            </div>
        </div>
    `;
    return container;
}

function renderQueue() {
    const players = [
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 0, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 1, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 2, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 3, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 4, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 5, bet: 150, waiting: true},
    ];
    const container = document.createElement('div');
    container.className = 'seka-table-container';
    container.innerHTML = `
        <div class="seka-header">
            <button class="menu-btn">‚ò∞</button>
            <span class="queue-label">–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ user1234</span>
            <div>
                <button class="sound-btn">üîä</button>
                <button class="settings-btn">‚öôÔ∏è</button>
            </div>
        </div>
        <div class="seka-table">
            <div class="seka-table-logo">–°–ï–ö–ê</div>
            <div class="seka-bank">–ë–∞–Ω–∫: $1,760</div>
            <div class="seka-players">
                ${players.map(p => renderPlayer({...p, cardsBack: true})).join('')}
            </div>
        </div>
        <div class="seka-bottom-message">–û–∂–∏–¥–∞–π—Ç–µ –æ—á–µ—Ä–µ–¥–∏</div>
    `;
    return container;
}

function renderTurn() {
    const players = [
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 0, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 1, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 2, bet: 150, waiting: true},
        {name: 'Paul K.', balance: 1500, avatar: '', pos: 3, bet: 150, fold: true, active: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 4, bet: 150, waiting: true},
        {name: 'Kendall R.', balance: 1500, avatar: '', pos: 5, bet: 150, waiting: true},
    ];
    const container = document.createElement('div');
    container.className = 'seka-table-container';
    container.innerHTML = `
        <div class="seka-header">
            <button class="menu-btn">‚ò∞</button>
            <span class="queue-label">–û—á–µ—Ä–µ–¥—å –∏–≥—Ä–æ–∫–∞ user1234</span>
            <div>
                <button class="sound-btn">üîä</button>
                <button class="settings-btn">‚öôÔ∏è</button>
            </div>
        </div>
        <div class="seka-table">
            <div class="seka-table-logo">–°–ï–ö–ê</div>
            <div class="seka-bank">–ë–∞–Ω–∫: $1,760</div>
            <div class="seka-players" id="seka-players-turn">
                ${players.map(p => renderPlayer({...p, cardsBack: p.fold ? false : true, openCards: p.active})).join('')}
            </div>
        </div>
        <div class="seka-controls-panel">
            <div class="action-btns">
                <button class="action-btn">–£—Ä–æ–≤–Ω—è—Ç—å</button>
                <button class="action-btn" style="background:#4CAF50;color:#fff;">–ü–æ–¥–Ω—è—Ç—å</button>
                <button class="action-btn fold">–ü–∞—Å</button>
            </div>
            <div class="bet-info">
                –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ <b>150$</b> &nbsp; –ë–∞–ª–∞–Ω—Å <b>900.00 ‚ÇΩ</b>
                <span class="player-avatar"></span>
            </div>
        </div>
    `;
    setTimeout(() => {
        animateDealCards();
        setTimeout(() => animateWinnerAndChips(3), 1200); // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ —Ñ–∏—à–∫–∏ –ø–æ—Å–ª–µ —Ä–∞–∑–¥–∞—á–∏
    }, 100);
    return container;
}

function animateDealCards() {
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –ø–æ –æ—á–µ—Ä–µ–¥–∏ –¥–µ–ª–∞–µ–º –ø–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç
    const playerEls = document.querySelectorAll('.seka-player .player-cards');
    playerEls.forEach((el, idx) => {
        if (!el) return;
        const cards = el.querySelectorAll('.card, .card.open');
        cards.forEach(card => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(-20px)';
        });
        setTimeout(() => {
            cards.forEach((card, cidx) => {
                setTimeout(() => {
                    card.style.transition = 'opacity 0.3s, transform 0.3s';
                    card.style.opacity = '1';
                    card.style.transform = 'translateY(0)';
                }, cidx * 120);
            });
        }, idx * 180);
    });
}

function renderBetting() {
    const container = renderTurn();
    // –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞–≤–æ–∫ –ø–æ–≤–µ—Ä—Ö
    const modalBg = document.createElement('div');
    modalBg.className = 'seka-bet-modal-bg';
    modalBg.innerHTML = `
        <div class="seka-bet-modal">
            <div style="color:#fff;font-size:1.2rem;margin-bottom:12px;">–î–µ–ª–∞–π—Ç–µ –≤–∞—à–∏ —Å—Ç–∞–≤–∫–∏</div>
            <div class="bet-chips-row">
                ${chipValues.map((v, i) => `<div class="bet-chip${selectedChip===i?' selected':''}" data-chip="${i}">${v}$</div>`).join('')}
            </div>
            <div class="bet-amount" id="bet-amount">${betAmount}$</div>
            <div class="bet-modal-btns">
                <button class="bet-modal-btn cancel" id="bet-cancel">–û—Ç–º–µ–Ω–∞</button>
                <button class="bet-modal-btn" id="bet-max">–ú–∞–∫—Å–∏–º—É–º</button>
            </div>
        </div>
    `;
    container.appendChild(modalBg);
    return container;
}

function addBettingListeners() {
    // –í—ã–±–æ—Ä —Ñ–∏—à–∫–∏
    document.querySelectorAll('.bet-chip').forEach(el => {
        el.onclick = e => {
            selectedChip = +el.getAttribute('data-chip');
            betAmount = chipValues[selectedChip];
            renderStage('betting');
        };
    });
    // –ö–Ω–æ–ø–∫–∞ "–ú–∞–∫—Å–∏–º—É–º"
    document.getElementById('bet-max').onclick = () => {
        selectedChip = chipValues.length - 1;
        betAmount = chipValues[selectedChip];
        animateChipToBank();
    };
    // –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞"
    document.getElementById('bet-cancel').onclick = () => {
        currentStage = 2; // –í–æ–∑–≤—Ä–∞—Ç –∫ —Ö–æ–¥—É
        renderStage('turn');
    };
}

function animateChipToBank() {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ñ–∏—à–∫–∏ –∏ –±–∞–Ω–∫–∞
    const chip = document.querySelector('.bet-chip.selected');
    const bank = document.querySelector('.seka-bank');
    if (!chip || !bank) {
        renderStage('turn');
        return;
    }
    const chipRect = chip.getBoundingClientRect();
    const bankRect = bank.getBoundingClientRect();
    // –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–∏—à–∫—É
    const animChip = document.createElement('div');
    animChip.className = 'bet-chip selected';
    animChip.style.position = 'fixed';
    animChip.style.left = chipRect.left + 'px';
    animChip.style.top = chipRect.top + 'px';
    animChip.style.zIndex = 9999;
    animChip.innerText = chip.innerText;
    document.body.appendChild(animChip);
    // –ê–Ω–∏–º–∞—Ü–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
    setTimeout(() => {
        animChip.style.transition = 'all 0.7s cubic-bezier(.4,2,.6,1)';
        animChip.style.left = (bankRect.left + bankRect.width/2 - chipRect.width/2) + 'px';
        animChip.style.top = (bankRect.top + bankRect.height/2 - chipRect.height/2) + 'px';
        animChip.style.opacity = '0.7';
        animChip.style.transform = 'scale(0.7)';
    }, 10);
    // –ü–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏ ‚Äî —É–¥–∞–ª—è–µ–º —Ñ–∏—à–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç—Ç–∞–ø—É —Ö–æ–¥–∞
    setTimeout(() => {
        animChip.remove();
        currentStage = 2; // –í–æ–∑–≤—Ä–∞—Ç –∫ —Ö–æ–¥—É
        renderStage('turn');
    }, 800);
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ –∏–≥—Ä–æ–∫–∞
function renderPlayer({name, balance, avatar, pos, bet, waiting, fold, active, placeholder, cardsBack, openCards}) {
    // –ü–æ–∑–∏—Ü–∏–∏ –ø–æ –∫—Ä—É–≥—É (6 –∏–≥—Ä–æ–∫–æ–≤)
    const positions = [
        {top: '5%', left: '50%', transform: 'translate(-50%,0)'},
        {top: '20%', left: '90%'},
        {top: '70%', left: '90%'},
        {top: '90%', left: '50%', transform: 'translate(-50%,0)'},
        {top: '70%', left: '10%'},
        {top: '20%', left: '10%'},
    ];
    const style = positions[pos] ?
        `top:${positions[pos].top};left:${positions[pos].left};${positions[pos].transform?`transform:${positions[pos].transform};`:''}` : '';
    if (placeholder) {
        return `<div class="seka-player" style="${style}">
            <div class="avatar" style="background:#e0e0e0 url('https://cdn-icons-png.flaticon.com/512/149/149071.png') center/cover no-repeat;"></div>
        </div>`;
    }
    let status = '';
    if (fold) status = '<span style="background:#f44336;color:#fff;padding:2px 8px;border-radius:8px;">–ü–∞—Å</span>';
    else if (waiting) status = '<span style="background:#4CAF50;color:#fff;padding:2px 8px;border-radius:8px;">–û–∂–∏–¥–∞–µ—Ç</span>';
    let betLabel = bet ? `<div style="background:#222b3a;color:#FFD700;font-size:0.8rem;padding:2px 8px;border-radius:8px;margin-bottom:2px;">–û–ø–ª–∞—Ç–∏–ª: $${bet}</div>` : '';
    let cards = '';
    if (cardsBack) {
        cards = `<div class="player-cards">
            <div class="card"></div><div class="card"></div><div class="card"></div>
        </div>`;
    } else if (openCards) {
        cards = `<div class="player-cards">
            <div class="card open"></div><div class="card open"></div><div class="card open"></div>
        </div>`;
    }
    return `<div class="seka-player${active ? ' active' : ''}" style="${style}">
        <div class="avatar"></div>
        <div class="player-name">${name}</div>
        <div class="player-balance">$${balance}</div>
        ${betLabel}
        <div class="player-status">${status}</div>
        ${cards}
    </div>`;
}

function nextStage() {
    currentStage = (currentStage + 1) % stages.length;
    renderStage(stages[currentStage]);
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø–æ—è–≤–ª–µ–Ω–∏—è —Ñ–∏—à–µ–∫ –≤ –±–∞–Ω–∫
function animateWinnerAndChips(winnerPos = 3) {
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    const players = document.querySelectorAll('.seka-player');
    players.forEach((el, idx) => {
        el.classList.remove('winner');
        if (idx === winnerPos) {
            el.classList.add('winner');
            el.style.boxShadow = '0 0 24px 8px #FFD700, 0 0 0 4px #fff inset';
            el.style.transition = 'box-shadow 0.5s';
        } else {
            el.style.boxShadow = '';
        }
    });
    // –ü–ª–∞–≤–Ω–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ —Ñ–∏—à–µ–∫ –≤ –±–∞–Ω–∫–µ
    const bank = document.querySelector('.seka-bank');
    if (bank) {
        const chips = document.createElement('div');
        chips.style.display = 'flex';
        chips.style.justifyContent = 'center';
        chips.style.gap = '6px';
        chips.style.marginTop = '8px';
        chips.innerHTML = `
            <div class="chip" style="opacity:0;"></div>
            <div class="chip" style="opacity:0;"></div>
            <div class="chip" style="opacity:0;"></div>
        `;
        bank.appendChild(chips);
        setTimeout(() => {
            chips.childNodes.forEach((chip, i) => {
                setTimeout(() => {
                    chip.style.transition = 'opacity 0.4s';
                    chip.style.opacity = '1';
                }, i * 120);
            });
        }, 200);
    }
}

window.onload = () => {
    renderStage(stages[currentStage]);
    // –î–ª—è —Ç–µ—Å—Ç–∞: –∫–ª–∏–∫ –ø–æ —ç–∫—Ä–∞–Ω—É ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    document.getElementById('seka-root').onclick = nextStage;
};

// --- –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ React/TSX ---

/**
 * Player ‚Äî –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞
 * @param {Object} props - name, balance, avatar, pos, bet, waiting, fold, active, placeholder, cardsBack, openCards
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
function Player({name, balance, avatar, pos, bet, waiting, fold, active, placeholder, cardsBack, openCards}) {
    // ... (—Å–º. renderPlayer, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSX –≤–º–µ—Å—Ç–æ —Å—Ç—Ä–æ–∫)
}

/**
 * Table ‚Äî –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–æ–ª–∞ —Å –∏–≥—Ä–æ–∫–∞–º–∏
 * @param {Array} players - –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤
 * @param {string} bank - —Å—É–º–º–∞ –≤ –±–∞–Ω–∫–µ
 * @param {string} logo - –ª–æ–≥–æ—Ç–∏–ø/–Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ React
 */
function Table({players, bank, logo}) {
    // ... (—Å–º. renderTurn/renderQueue, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSX)
}

/**
 * Controls ‚Äî –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏, —Å—Ç–∞–≤–∫–∞, –±–∞–ª–∞–Ω—Å, –∞–≤–∞—Ç–∞—Ä)
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–∞–Ω–µ–ª–∏ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
function Controls({bet, balance, avatar, onCall, onRaise, onFold}) {
    // ... (—Å–º. .seka-controls-panel, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSX)
}

/**
 * BetModal ‚Äî –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ç–∞–≤–æ–∫
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è React-–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 */
function BetModal({chipValues, selectedChip, betAmount, onSelect, onMax, onCancel}) {
    // ... (—Å–º. renderBetting, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ JSX)
}

// --- –ö–æ–Ω–µ—Ü –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–ª—è React ---

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –º–∞–∫–µ—Ç–∞ (—Ä–µ–Ω–¥–µ—Ä, –∞–Ω–∏–º–∞—Ü–∏–∏, –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤) –æ—Å—Ç–∞–≤–ª—è—é –¥–ª—è —Ç–µ—Å—Ç–∞ –∏ –ø—Ä–∏–º–µ—Ä–∞.
// –î–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ React –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤—ã—à–µ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ö—É–∫–∏/—Å–æ—Å—Ç–æ—è–Ω–∏—è.

// ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ... 