import logging
import asyncio
from typing import Dict, Optional
from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request, HTTPException
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from db import check_database_connection, get_redis, get_db
from game.matchmaking import MatchMaker
from game.engine import GameState
from redis.exceptions import RedisError
from sqlalchemy.exc import SQLAlchemyError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ú–æ–Ω—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")
app.mount("/pages", StaticFiles(directory="pages"), name="pages")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
matchmaker = MatchMaker(get_redis())

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
active_connections: Dict[str, WebSocket] = {}

class ConnectionManager:
    def __init__(self):
        self.active_connections: Dict[str, WebSocket] = {}
        self.heartbeat_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.reconnect_attempts = 3
        self.reconnect_delay = 5  # —Å–µ–∫—É–Ω–¥
        
    async def connect(self, websocket: WebSocket, client_id: str):
        await websocket.accept()
        self.active_connections[client_id] = websocket
        asyncio.create_task(self._heartbeat(client_id))
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç {client_id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è")
        
    def disconnect(self, client_id: str):
        self.active_connections.pop(client_id, None)
        logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç {client_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        
    async def send_personal_message(self, message: dict, client_id: str):
        if client_id in self.active_connections:
            for attempt in range(self.reconnect_attempts):
                try:
                    await self.active_connections[client_id].send_json(message)
                    return
                except WebSocketDisconnect:
                    logger.warning(f"‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
                    break
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É {client_id}: {e}")
                    if attempt < self.reconnect_attempts - 1:
                        await asyncio.sleep(self.reconnect_delay)
                    else:
                        await self.disconnect(client_id)
                
    async def broadcast(self, message: dict, exclude: Optional[str] = None):
        disconnected_clients = []
        for client_id, connection in self.active_connections.items():
            if client_id != exclude:
                try:
                    await connection.send_json(message)
                except WebSocketDisconnect:
                    logger.warning(f"‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
                    disconnected_clients.append(client_id)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ broadcast –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
                    disconnected_clients.append(client_id)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client_id in disconnected_clients:
            self.disconnect(client_id)
                    
    async def _heartbeat(self, client_id: str):
        while client_id in self.active_connections:
            try:
                await self.send_personal_message({"type": "ping"}, client_id)
                await asyncio.sleep(self.heartbeat_interval)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ heartbeat –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {e}")
                break
        self.disconnect(client_id)

manager = ConnectionManager()

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        if not await check_database_connection():
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö")
            exit(1)
        logger.info("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∑–∞–≤–∏—Å—à–∏—Ö –∏–≥—Ä
        asyncio.create_task(matchmaker.cleanup_stale_games())
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        exit(1)

@app.get("/")
async def read_root(request: Request):
    return FileResponse("pages/gameplay/index.html")

@app.websocket("/ws/{player_id}")
async def websocket_endpoint(websocket: WebSocket, player_id: str):
    await manager.connect(websocket, player_id)
    
    try:
        while True:
            try:
                data = await websocket.receive_json()
                await handle_websocket_message(websocket, player_id, data)
            except WebSocketDisconnect:
                logger.info(f"üëã –ö–ª–∏–µ–Ω—Ç {player_id} –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
                break
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": str(e)
                    },
                    player_id
                )
            except RedisError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    },
                    player_id
                )
            except SQLAlchemyError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    },
                    player_id
                )
            except Exception as e:
                logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                    },
                    player_id
                )
    finally:
        manager.disconnect(player_id)
        try:
            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            await matchmaker.remove_from_queue(player_id)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ {player_id} –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")

async def handle_websocket_message(websocket: WebSocket, player_id: str, data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö WebSocket —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        message_type = data.get("type")
        if not message_type:
            raise ValueError("–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω")
            
        if message_type == "find_game":
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
                rating = data.get("rating", 1000)
                if not isinstance(rating, (int, float)) or rating < 0:
                    raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞")
                    
                await matchmaker.add_to_queue(player_id, rating)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –º–∞—Ç—á
                match = await matchmaker.find_match(rating)
                if match:
                    game_id = await matchmaker.create_game(match)
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤
                    for pid in match:
                        await manager.send_personal_message(
                            {
                                "type": "game_found",
                                "game_id": game_id
                            },
                            pid
                        )
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": str(e)
                    },
                    player_id
                )
            except RedisError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–≥—Ä—ã"
                    },
                    player_id
                )
            
        elif message_type == "game_action":
            try:
                game_id = data.get("game_id")
                action = data.get("action")
                
                if not game_id or not action:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
                    
                game_state = await matchmaker.get_game_state(game_id)
                if not game_state:
                    raise ValueError("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    
                game = GameState()
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                if action == "bet":
                    try:
                        amount = data.get("amount", 0)
                        if not isinstance(amount, (int, float)) or amount <= 0:
                            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")
                            
                        if game.place_bet(player_id, amount):
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                            for pid in game.players:
                                await manager.send_personal_message(
                                    {
                                        "type": "game_state",
                                        "data": game.to_dict()
                                    },
                                    pid
                                )
                    except ValueError as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å—Ç–∞–≤–∫–∏ –æ—Ç {player_id}: {e}")
                        await manager.send_personal_message(
                            {
                                "type": "error",
                                "message": str(e)
                            },
                            player_id
                        )
                
                elif action == "fold":
                    try:
                        game.fold(player_id)
                        winner = game.get_winner()
                        if winner:
                            # –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                            await matchmaker.end_game(game_id)
                            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
                            for pid in game.players:
                                await manager.send_personal_message(
                                    {
                                        "type": "game_over",
                                        "winner": winner,
                                        "bank": game.bank
                                    },
                                    pid
                                )
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ–ª–¥–∞ –æ—Ç {player_id}: {e}")
                        await manager.send_personal_message(
                            {
                                "type": "error",
                                "message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ–ª–¥–∞"
                            },
                            player_id
                        )
                else:
                    raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏–≥—Ä–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await matchmaker.update_game_state(game_id, game)
                
            except ValueError as e:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": str(e)
                    },
                    player_id
                )
            except RedisError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Redis –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è"
                    },
                    player_id
                )
            except SQLAlchemyError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç {player_id}: {e}")
                await manager.send_personal_message(
                    {
                        "type": "error",
                        "message": "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è"
                    },
                    player_id
                )
            
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {player_id}: {message_type}")
            await manager.send_personal_message(
                {
                    "type": "error",
                    "message": f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}"
                },
                player_id
            )
            
    except Exception as e:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {player_id}: {e}")
        await manager.send_personal_message(
            {
                "type": "error",
                "message": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
            },
            player_id
        )

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000) 